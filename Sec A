1.A Version control system solves the problem of managing and tracking changes to file over time.it allows multiple developers to work on same project without conflict.it helps avoid overwrite .
Centralized and distributed version control systems differ primarily in how they store and manage project history. In a centralized system, all changes are tracked and stored on a central server, with developers checking out and checking back in files. In a distributed system, each developer has a full copy of the repository.
2.The key difference between Git and GitHub is that Git is a free, open source version control tool that developers install locally on their personal computers, while GitHub is a pay-for-use online service built to run Git in the cloud. 
3.The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit. Its technical name in Git parlance is the “index”, but the phrase “staging area” works just as well.
4.The . git folder contains all the information that is necessary for your project in version control and all the information about commits, remote repository address, etc. All of them are present in this folder. It also contains a log that stores your commit history so that you can roll back to history.
5.The git branch command can be used to create a new branch. When you want to start a new feature, you create a new branch off main using git branch new_branch . Once created you can then use git checkout new_branch to switch to that branch.
6.Use git reset soft if you want to purge your commit history but keep your index and filesystem unchanged. Use git reset hard if you want to clear the index and revert all tracked files to their state at the reset commit.
7.Squash merging in Git combines multiple commits from a feature branch into a single commit when merging it into the main branch. This is useful for keeping a clean and linear history in the main branch by joining multiple smaller commits into one larger, meaningful commit. 
8.git rebase is a powerful Git command used to integrate changes from one branch onto another in a cleaner, linear way.  git rebase rewrites the commit history by changing the base of your branch to a new one.
9.Consider a scenario where a developer creates a feature branch named feature-branch from the main branch. While the developer works on feature-branch, the main branch receives new commits. 
                    